// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	users "github.com/superosystem/bantumanten-backend/src/businesses/users"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ID
func (_m *UseCase) Delete(ID string) bool {
	ret := _m.Called(ID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *UseCase) GetAll() []users.Domain {
	ret := _m.Called()

	var r0 []users.Domain
	if rf, ok := ret.Get(0).(func() []users.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.Domain)
		}
	}

	return r0
}

// GetByEmail provides a mock function with given fields: email
func (_m *UseCase) GetByEmail(email string) (*users.Domain, error) {
	ret := _m.Called(email)

	var r0 *users.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*users.Domain, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *users.Domain); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Domain)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ID
func (_m *UseCase) GetByID(ID string) (*users.Domain, error) {
	ret := _m.Called(ID)

	var r0 *users.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*users.Domain, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) *users.Domain); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Domain)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignIn provides a mock function with given fields: domain
func (_m *UseCase) SignIn(domain *users.SignInDomain) (*users.Domain, error) {
	ret := _m.Called(domain)

	var r0 *users.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(*users.SignInDomain) (*users.Domain, error)); ok {
		return rf(domain)
	}
	if rf, ok := ret.Get(0).(func(*users.SignInDomain) *users.Domain); ok {
		r0 = rf(domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Domain)
		}
	}

	if rf, ok := ret.Get(1).(func(*users.SignInDomain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignUp provides a mock function with given fields: domain
func (_m *UseCase) SignUp(domain *users.Domain) error {
	ret := _m.Called(domain)

	var r0 error
	if rf, ok := ret.Get(0).(func(*users.Domain) error); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ID, domain
func (_m *UseCase) Update(ID string, domain *users.Domain) (*users.Domain, error) {
	ret := _m.Called(ID, domain)

	var r0 *users.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *users.Domain) (*users.Domain, error)); ok {
		return rf(ID, domain)
	}
	if rf, ok := ret.Get(0).(func(string, *users.Domain) *users.Domain); ok {
		r0 = rf(ID, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Domain)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *users.Domain) error); ok {
		r1 = rf(ID, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
